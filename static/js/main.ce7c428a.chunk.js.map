{"version":3,"sources":["img/camera.png","img/flower.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","NavBar","id","className","NavButton","icon","text","route","href","ContentDiv","children","classes","otherClasses","MainContent","Title","TextContent","Image","image","camera","alt","flower","src","GoTopButton","button","document","getElementById","onclick","body","scrollTop","documentElement","window","onscroll","style","display","title","React","Component","App","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0GAAAA,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,8OCgB3C,SAASC,IACP,OACE,yBAAKC,GAAG,MAAMC,UAAU,UACtB,kBAACC,EAAD,CAAWC,KAAM,kBAAC,IAAD,MAAWC,KAAM,OAAQC,MAAO,MACjD,kBAACH,EAAD,CAAWC,KAAM,kBAAC,IAAD,MAAYC,KAAM,QAASC,MAAO,OAKzD,SAASH,EAAT,GAAyC,IAArBE,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,MAAOF,EAAO,EAAPA,KAC/B,OACE,uBAAGF,UAAU,aAAaK,KAAMD,GAC7BF,EACD,2BAAIC,IAKV,SAASG,EAAT,GAA+C,IAA1BC,EAAyB,EAAzBA,SACfC,EAAU,eAD8B,EAAfC,aAE7B,OACE,yBAAKT,UAAWQ,GACbD,GAKP,SAASG,IACR,OACC,kBAACJ,EAAD,CAAYG,aAAc,uBACxB,kBAACE,EAAD,iBACA,kBAACC,EAAD,8bACA,kBAACC,EAAD,CAAOC,MAAOC,IAAQC,IAAK,WAC3B,kBAACJ,EAAD,kUACA,kBAACC,EAAD,CAAOC,MAAOG,IAAQD,IAAK,WAC3B,kBAACJ,EAAD,w0BAKJ,SAASC,EAAT,GAA6B,IAAbC,EAAY,EAAZA,MAAOE,EAAK,EAALA,IACrB,OACE,yBAAKhB,UAAU,WACb,yBAAKkB,IAAKJ,EAAOE,IAAKA,KAK5B,SAASL,EAAT,GAA4B,IAAZJ,EAAW,EAAXA,SACd,OACE,wBAAIP,UAAU,SAASO,GAI3B,SAASK,EAAT,GAAkC,IAAZL,EAAW,EAAXA,SACpB,OACE,uBAAGP,UAAU,gBAAgBO,G,IAI3BY,E,4LAEF,IAAMC,EAASC,SAASC,eAAe,UAOvCF,EAAOG,QALa,WAClBF,SAASG,KAAKC,UAAY,EAC1BJ,SAASK,gBAAgBD,UAAY,GAavCE,OAAOC,SARgB,WACjBP,SAASG,KAAKC,UAAY,IAAMJ,SAASK,gBAAgBD,UAAY,GACvEL,EAAOS,MAAMC,QAAU,QAEvBV,EAAOS,MAAMC,QAAU,U,+BAQ3B,OACE,4BAAQ/B,GAAG,SAASgC,MAAM,iBACxB,kBAAC,IAAD,W,GAzBkBC,IAAMC,WA+BjBC,EArGf,WACE,OACE,yBAAKlC,UAAU,OACb,kBAACF,EAAD,MACA,kBAACY,EAAD,MACA,kBAAC,EAAD,QCCcyB,QACW,cAA7BR,OAAOS,SAASC,UAEe,UAA7BV,OAAOS,SAASC,UAEhBV,OAAOS,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASnB,SAASC,eAAe,SD6H3C,kBAAmBmB,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ce7c428a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/camera.f027b17e.png\";","module.exports = __webpack_public_path__ + \"static/media/flower.67d6346c.png\";","import React from 'react';\nimport './App.css';\nimport camera from './img/camera.png';\nimport flower from './img/flower.png';\nimport { FaHome, FaHotel, FaArrowUp } from 'react-icons/fa';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <NavBar/>\n      <MainContent/>\n      <GoTopButton/>\n    </div>\n  );\n}\n\nfunction NavBar() {\n  return (\n    <nav id=\"nav\" className=\"border\">\n      <NavButton icon={<FaHome/>} text={\"Home\"} route={\"/\"}/>\n      <NavButton icon={<FaHotel/>} text={\"About\"} route={\"/\"}/>\n    </nav>\n  )\n}\n\nfunction NavButton({text, route, icon}) {\n  return (\n    <a className=\"nav-button\" href={route}>\n      {icon}\n      <p>{text}</p>\n    </a>\n  )\n}\n\nfunction ContentDiv({children, otherClasses}) {\n  let classes = \"content-div \" + otherClasses\n  return(\n    <div className={classes}>\n      {children}\n    </div>\n  )\n}\n\nfunction MainContent() {\n return (\n  <ContentDiv otherClasses={\"main-content border\"}>\n    <Title>What If?</Title>\n    <TextContent>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed in malesuada libero, eget laoreet lectus. Aliquam finibus dapibus ligula, sit amet tincidunt dui posuere non. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Integer porttitor tempus tortor ut dictum. Maecenas placerat orci sit amet nisi luctus, porta euismod ipsum sagittis. Nullam nec malesuada diam. Suspendisse eget ante urna.</TextContent>\n    <Image image={camera} alt={\"camera\"}/>\n    <TextContent>Ut aliquet felis feugiat lorem posuere, id vulputate leo fermentum. Suspendisse vestibulum dolor odio, vitae sollicitudin quam mattis id. Etiam eget eleifend est. Aliquam at iaculis justo. Aenean pulvinar molestie eleifend. Aliquam egestas dignissim mollis. Suspendisse semper risus quis neque ultrices ultricies.</TextContent>\n    <Image image={flower} alt={\"flower\"}/>\n    <TextContent>Nunc at magna eleifend, luctus lorem vel, bibendum odio. Quisque egestas quam faucibus libero cursus rutrum. Sed a metus placerat, pulvinar nisi at, finibus urna. Duis malesuada quis felis vel tempus. Morbi massa ex, aliquet eget erat eu, tincidunt pulvinar nunc. Quisque lorem est, sollicitudin eget sagittis vitae, faucibus aliquam sapien. Pellentesque vulputate neque diam, ac cursus lorem commodo nec. Curabitur et mauris vitae felis fermentum iaculis. Sed eu urna at nibh convallis sagittis ut eget neque. Vivamus fringilla mauris blandit felis maximus, vel efficitur nisi condimentum. Aliquam vel purus augue. Fusce nulla quam, tempor ac sagittis vel, luctus at quam. Mauris sagittis ac sem vel facilisis. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aliquam egestas urna risus, sit amet rutrum est mollis vitae.</TextContent>\n  </ContentDiv>\n )\n}\n\nfunction Image({image, alt}){\n  return (\n    <div className=\"img-div\">\n      <img src={image} alt={alt}></img>\n    </div>\n  )\n}\n\nfunction Title({children}) {\n  return (\n    <h1 className=\"title\">{children}</h1>\n  )\n}\n\nfunction TextContent({children}) {\n  return (\n    <p className=\"text-content\">{children}</p>\n  )\n}\n\nclass GoTopButton extends React.Component {\n  componentDidMount() {\n    const button = document.getElementById(\"go-top\");\n\n    const topFunction = () => {\n      document.body.scrollTop = 0; // For Safari\n      document.documentElement.scrollTop = 0; // For Chrome, Firefox, IE and Opera\n    }\n\n    button.onclick = topFunction;\n\n    const scrollFunction = () => {\n      if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {\n        button.style.display = \"block\";\n      } else {\n        button.style.display = \"none\";\n      }\n    }\n\n    window.onscroll = scrollFunction;\n  }\n\n  render() {\n    return (\n      <button id=\"go-top\" title=\"Go to the Top\">\n        <FaArrowUp/>\n      </button>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}